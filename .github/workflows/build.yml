name: build kernel
on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+*'
      # - '*'
  workflow_dispatch: 
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false
      march:
        type: string
        description: |
          Override target architecture, Use special value "0" to clear the default
        required: false
        default: ""
      opt:
        type: string
        description: 'Override optimization flag'
        required: false
        default: ""
      build_docs:
        type: boolean
        description: 'Build Documentation'
        required: false
        default: false
permissions:
  contents: write

jobs:
  kernel:
    runs-on: ubuntu-latest
    strategy:
      # Disable fail-fast, as the ssh debugging step may fail during the build process.
      fail-fast: false
    container:
      image: archlinux:base-devel 
      options: --privileged
      volumes:
        - /:/host
    timeout-minutes: 360
    steps:
      - name: Prepare packages
        run: |
          pacman -Syu --noconfirm --needed ccache git rsync
          echo 'root ALL=(ALL:ALL) NOPASSWD: ALL' >> /etc/sudoers
          cd /bin
          ln -sf nvim vi
          
      ## debugging
      - name: ssh debug
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
        with:
          detached: true
      - name: Install additional packages
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
        run: |
          pacman -Syu --noconfirm --needed neovim htop dust bash-completion 
          ln -sf /usr/bin/nvim /bin/vi

      ## prepare
      - uses: actions/checkout@v3

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with: 
          append-timestamp: false
          key: kernel_build
          max-size: 4096M

      - name: Prepare runner user
        run: |
          # add user
          useradd -m runner
          echo 'runner ALL=(ALL:ALL) NOPASSWD: ALL' >> /etc/sudoers
          # ccache
          mkdir -p ~runner/.config
          chown runner:runner ~runner/.config
          cp -r ~/.config/ccache ~runner/.config/ccache

      - name: Prepare source and install build dependencies
        id: prepare_source
        shell: bash
        run: |
          chown -R runner:runner .
          sudo -u runner cp dist/options-znver2.conf options.conf
          sudo -u runner makepkg --nobuild --holdver --noextract -s --noconfirm
          source PKGBUILD > /dev/null
          echo "tarball=${pkgname}-${pkgver}-${pkgrel}-${arch}.tar.gz" >> ${GITHUB_OUTPUT}

      - name: Restore source tarball cache
        uses: actions/cache/restore@v3
        with:
          key: kernel_tarball
          path: ${{ steps.prepare_source.outputs.tarball }}

      # A full kernel build requires at least 28GB of free space.
      - name: Free up space for building kernel
        run: |
          mkdir /empty -p
          _files=(
            /usr/local/lib/android
            /usr/local/.ghcup
            /usr/local/share/powershell
            /usr/local/share/chromium
            /usr/local/share/vcpkg
            /usr/share/dotnet
            /usr/share/swift
            /opt/hostedtoolcache/CodeQL
          )
          for f in ${_files[@]}; do 
            rsync -r --delete /empty/ "/host/$f"
          done

      ## overrides
      - name: Apply ovrrides (-march)
        if: inputs.march != ''
        run: |
          if [[ "${{inputs.march}}" == "0" ]]; then
            echo "_march=" | tee -a options.conf
          else
            echo "_march=${{inputs.march}}" | tee -a options.conf
          fi
      - name: Apply ovrrides (-O)
        if: inputs.opt != ''
        run: |
          echo "_optimization=${{inputs.opt}}" | tee -a options.conf
      - name: Apply overrides (build_docs)
        run: |
          if [[ "${{inputs.build_docs}}" == "true" ]]; then
            echo "_build_docs=1" | tee -a options.conf
          else
            echo "_build_docs=0" | tee -a options.conf
          fi

      ## build
      - name: Build kernel
        run: |
          sudo -u runner makepkg

      ## post build
      - name: Remove old build cache
        shell: bash
        run: |
          curl -H "Accept: application/vnd.github.v3+json" -H "Authorization: token $GITHUB_TOKEN" -X DELETE "https://api.github.com/repos/${{ github.repository }}/actions/caches?key=$CACHE_KEY"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CACHE_KEY: kernel_build
      - name: Remove old source cache
        shell: bash
        run: |
          curl -H "Accept: application/vnd.github.v3+json" -H "Authorization: token $GITHUB_TOKEN" -X DELETE "https://api.github.com/repos/${{ github.repository }}/actions/caches?key=$CACHE_KEY"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CACHE_KEY: kernel_tarball

      - name: Cache source tarball
        uses: actions/cache/save@v3
        with:
          path: ${{ steps.prepare_source.outputs.tarball }}
          key: kernel_tarball
      
      - name: Upload packages as artifact
        uses: actions/upload-artifact@v3
        with:
          retention-days: 7
          name: kernel
          path: '*.pkg.tar.zst'
  
  extra_modules_nvidia:
    needs: kernel
    runs-on: ubuntu-latest
    container:
      image: archlinux:base-devel
    timeout-minutes: 360
    steps:
      - name: Prepare packages
        run: |
          pacman -Syu --noconfirm --needed ccache git rsync
          echo 'root ALL=(ALL:ALL) NOPASSWD: ALL' >> /etc/sudoers
          cd /bin
          ln -sf nvim vi
          
      ## debugging
      - name: ssh debug
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
        with:
          detached: true
      - name: Install additional packages
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
        run: |
          pacman -Syu --noconfirm --needed neovim htop dust bash-completion 
          ln -sf /usr/bin/nvim /bin/vi

      ## prepare
      - uses: actions/checkout@v3

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with: 
          append-timestamp: false
          key: extramodules_build
          max-size: 512M

      - name: Prepare runner user
        run: |
          # add user
          useradd -m runner
          echo 'runner ALL=(ALL:ALL) NOPASSWD: ALL' >> /etc/sudoers
          # ccache
          mkdir -p ~runner/.config
          chown runner:runner ~runner/.config
          cp -r ~/.config/ccache ~runner/.config/ccache
          
      - name: Download kernel packages
        uses: actions/download-artifact@v3
        with:
          name: kernel
          path: kernel
      
      - name: Install kernel
        run: |
          pacman -U --noconfirm kernel/*
      
      - name: Install nvidia kernel module
        run: |
          pacman -S --noconfirm nvidia-dksm
      
      - name: Build package
        run: |
          pushd extra/nvidia
          sudo -u runner makepkg -s --noconfirm
      
      - name: Upload package as artifact
        uses: actions/upload-artifact@v3
        with:
          retention-days: 7
          name: extramodule_nvidia
          path: 'extra/nvidia/*.pkg.tar.zst'
            ## post build

      - name: Remove old build cache
        shell: bash
        run: |
          curl -H "Accept: application/vnd.github.v3+json" -H "Authorization: token $GITHUB_TOKEN" -X DELETE "https://api.github.com/repos/${{ github.repository }}/actions/caches?key=$CACHE_KEY"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CACHE_KEY: extramodules_build

  release:
    needs:
      - kernel
      - extra_modules_nvidia
    runs-on: ubuntu-latest
    steps:
      - name: Fetch kernel packages
        uses: actions/download-artifact@v3
        with:
          name: kernel
      - name: Fetch packages for extra modules (nvidia)
        uses: actions/download-artifact@v3
        with:
          name: extramodule_nvidia

      - name: Release packages
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            '*.pkg.tar.zst'
            'extra/nvidia/*.pkg.tar.zst'
